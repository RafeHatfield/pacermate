rails generate model Modelname field1:string user_id:integer

edit migration file, add index as required
add_index :modelname, [:user_id, :created_at]

write failing tests for the existence of the fields
describe Modelname do

  let(:user) { FactoryGirl.create(:user) }
  before do
    # This code is wrong if user has many / belongs to relationship
    @modelname = Modelname.new(field1: "Lorem ipsum", user_id: user.id)
  end
  # if user has many / belongs to modelname
  before { @modelname = user.modelname.build(content: "Lorem ipsum") }

  subject { @modelname }

  it { should respond_to(:field1) }
  it { should respond_to(:user_id) }
end

rake db:migrate
rake db:test:prepare

make sure tests pass
rspec spec/models/modelname_spec.rb

add basic validity and failing test for required fields

it { should be_valid }

describe "when user_id is not present" do
  before { @modelname.user_id = nil }
  it { should_not be_valid }
end

add validity checks to make tests pass to modelname.rb
validates :user_id, presence: true


check for invalide mass assignment; for this to work the following must be uncommented in application.rb
config.active_record.whitelist_attributes = true


  describe "accessible attributes" do
    it "should not allow access to user_id" do
      expect do
        Micropost.new(user_id: user.id)
      end.should raise_error(ActiveModel::MassAssignmentSecurity::Error)
    end    
  end


update modelname.rb attr_accessible list to make previous test pass


